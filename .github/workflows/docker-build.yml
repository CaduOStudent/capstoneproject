# .github/workflows/docker-build.yml
name: Build & Push Image

on:
  workflow_run:
    workflows: ["Django CI"]
    types:
      - completed

jobs:
  

  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4


      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Setup QEMU & Buildx
        uses: docker/setup-buildx-action@v2

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/CaduOStudent/capstoneproject

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

          # build-args: |
          #   DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          #   GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          #   GITHUB_FINE_GRAINED_TOKEN=${{ secrets.GITHUB_FINE_GRAINED_TOKEN }}
          #   GITHUB_REPO=${{ secrets.GITHUB_REPO }}
          #   GITHUB_REPO_OWNER=${{ secrets.GITHUB_REPO_OWNER }}

  deploy-application:
    name: Deploy Application via GitOps
    runs-on: ubuntu-latest
    needs:
      
      - build

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump image.tag in Production values
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'envs/production/values.yaml'
          propertyPath: 'image.tag'
          value: ${{ github.sha }}
          branch: main
          commitChange: true
          message: |
            chore: Deploy Image Version ${{ github.sha }} [skip ci]

      - name: (Optional) Trigger Argo CD Sync
        if: false  # remove or set to true if you prefer explicit sync over auto-sync
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const server = process.env.ARGOCD_SERVER;
            const token  = process.env.ARGOCD_TOKEN;
            const response = await github.rest.repos.createDispatchEvent({
              owner: 'CaduOStudent',
              repo: 'capstoneproject',
              event_type: 'argocd-sync',
              client_payload: {
                server,
                token
              }
            });